/**
 * Test des routes mont√©es dans l'API principale
 */

console.log('üß™ Test des routes mont√©es dans l\'API principale\n');

try {
    // Importer l'API principale
    const apiRouter = require('./src/routes/api');
    
    console.log('‚úÖ API Router import√© avec succ√®s');
    console.log('üìã Nombre de layers:', apiRouter.stack.length);
    
    // Afficher tous les layers mont√©s
    console.log('\nüîç Layers mont√©s dans l\'API:');
    apiRouter.stack.forEach((layer, index) => {
        console.log(`  Layer ${index}:`, {
            name: layer.name,
            regexp: layer.regexp?.toString(),
            keys: layer.keys,
            route: layer.route ? 'ROUTE' : 'MIDDLEWARE'
        });
        
        // Si c'est un routeur mont√©, afficher ses routes
        if (layer.name === 'router' && layer.handle && layer.handle.stack) {
            console.log(`    Routes dans ${layer.regexp}:`);
            layer.handle.stack.forEach((subLayer, subIndex) => {
                if (subLayer.route) {
                    const methods = Object.keys(subLayer.route.methods).join(',').toUpperCase();
                    console.log(`      ${subIndex}: ${methods} ${subLayer.route.path}`);
                }
            });
        }
    });
    
    // V√©rifier sp√©cifiquement les routes patient
    console.log('\nüéØ V√©rification des routes patient:');
    const patientLayer = apiRouter.stack.find(layer => 
        layer.regexp && layer.regexp.toString().includes('patient')
    );
    
    if (patientLayer && patientLayer.handle && patientLayer.handle.stack) {
        console.log('  ‚úÖ Routes patient trouv√©es:');
        patientLayer.handle.stack.forEach((subLayer, subIndex) => {
            if (subLayer.route) {
                const methods = Object.keys(subLayer.route.methods).join(',').toUpperCase();
                console.log(`    ${subIndex}: ${methods} ${subLayer.route.path}`);
            }
        });
    } else {
        console.log('  ‚ùå Aucune route patient trouv√©e');
    }
    
} catch (error) {
    console.error('‚ùå Erreur:', error.message);
    console.error('Stack:', error.stack);
}

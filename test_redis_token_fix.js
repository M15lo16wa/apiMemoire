const axios = require('axios');
const { redis } = require('./src/config/redis');

// Configuration
const BASE_URL = 'http://localhost:3000/api';
const TEST_PATIENT = {
  numero_assure: 'IPRES123456789',
  mot_de_passe: 'motdepasse123'
};

// Couleurs pour les logs
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

const log = (message, color = 'reset') => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

const logSuccess = (message) => log(`‚úÖ ${message}`, 'green');
const logError = (message) => log(`‚ùå ${message}`, 'red');
const logInfo = (message) => log(`‚ÑπÔ∏è  ${message}`, 'blue');
const logWarning = (message) => log(`‚ö†Ô∏è  ${message}`, 'yellow');

// Test de connexion Redis
async function testRedisConnection() {
  try {
    logInfo('üîç Test de connexion Redis...');
    await redis.ping();
    logSuccess('Redis connect√© avec succ√®s');
    return true;
  } catch (error) {
    logError(`Erreur de connexion Redis: ${error.message}`);
    return false;
  }
}

// Test de g√©n√©ration et stockage de token
async function testTokenGeneration() {
  try {
    logInfo('üîç Test de g√©n√©ration et stockage de token...');
    
    const tokenService = require('./src/services/tokenService');
    
    // Simuler un utilisateur
    const mockUser = {
      id_utilisateur: 999,
      nom: 'Test',
      prenom: 'User',
      email: 'test@example.com',
      role: 'test'
    };
    
    // G√©n√©rer et stocker un token
    const token = await tokenService.generateAndStoreToken(mockUser, 'utilisateur');
    logSuccess(`Token g√©n√©r√©: ${token.substring(0, 20)}...`);
    
    // V√©rifier que le token est stock√© dans Redis
    const validation = await tokenService.validateToken(token);
    if (validation) {
      logSuccess('Token valid√© avec succ√®s dans Redis');
      logInfo(`Donn√©es du token: ${JSON.stringify(validation)}`);
    } else {
      logError('Token non trouv√© dans Redis');
      return false;
    }
    
    // Nettoyer le token de test
    await tokenService.revokeToken(token, mockUser.id_utilisateur);
    logSuccess('Token de test r√©voqu√©');
    
    return true;
  } catch (error) {
    logError(`Erreur lors du test de g√©n√©ration de token: ${error.message}`);
    return false;
  }
}

// Test de connexion patient
async function testPatientLogin() {
  try {
    logInfo('üîç Test de connexion patient...');
    
    const response = await axios.post(`${BASE_URL}/patient/auth/login`, TEST_PATIENT);
    
    if (response.status === 200) {
      logSuccess('Connexion patient r√©ussie');
      logInfo(`Token re√ßu: ${response.data.token ? response.data.token.substring(0, 20) + '...' : 'Aucun token'}`);
      
      // V√©rifier que le token est dans Redis
      const token = response.data.token;
      if (token) {
        const tokenService = require('./src/services/tokenService');
        const validation = await tokenService.validateToken(token);
        
        if (validation) {
          logSuccess('Token trouv√© et valid√© dans Redis');
          return { token, patient: response.data.data.patient };
        } else {
          logError('Token non trouv√© dans Redis apr√®s connexion');
          return null;
        }
      }
      
      return response.data;
    } else {
      logError(`Connexion √©chou√©e avec le statut: ${response.status}`);
      return null;
    }
  } catch (error) {
    if (error.response) {
      logError(`Erreur de connexion: ${error.response.status} - ${error.response.data.message || error.response.statusText}`);
    } else {
      logError(`Erreur de connexion: ${error.message}`);
    }
    return null;
  }
}

// Test d'acc√®s √† une route prot√©g√©e
async function testProtectedRoute(token, patientId) {
  try {
    logInfo('üîç Test d\'acc√®s √† une route prot√©g√©e...');
    
    const headers = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };
    
    // Test d'acc√®s au dossier m√©dical
    const response = await axios.get(`${BASE_URL}/dossierMedical/patient/${patientId}/complet`, { headers });
    
    if (response.status === 200) {
      logSuccess('Acc√®s √† la route prot√©g√©e r√©ussi');
      return true;
    } else {
      logError(`Acc√®s √©chou√© avec le statut: ${response.status}`);
      return false;
    }
  } catch (error) {
    if (error.response) {
      logError(`Erreur d'acc√®s: ${error.response.status} - ${error.response.data.message || error.response.statusText}`);
    } else {
      logError(`Erreur d'acc√®s: ${error.message}`);
    }
    return false;
  }
}

// Test de d√©connexion
async function testPatientLogout(token) {
  try {
    logInfo('üîç Test de d√©connexion patient...');
    
    const headers = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };
    
    const response = await axios.post(`${BASE_URL}/patient/auth/logout`, {}, { headers });
    
    if (response.status === 200) {
      logSuccess('D√©connexion r√©ussie');
      
      // V√©rifier que le token est r√©voqu√© dans Redis
      const tokenService = require('./src/services/tokenService');
      const validation = await tokenService.validateToken(token);
      
      if (!validation) {
        logSuccess('Token r√©voqu√© avec succ√®s dans Redis');
        return true;
      } else {
        logError('Token toujours valide dans Redis apr√®s d√©connexion');
        return false;
      }
    } else {
      logError(`D√©connexion √©chou√©e avec le statut: ${response.status}`);
      return false;
    }
  } catch (error) {
    if (error.response) {
      logError(`Erreur de d√©connexion: ${error.response.status} - ${error.response.data.message || error.response.statusText}`);
    } else {
      logError(`Erreur de d√©connexion: ${error.message}`);
    }
    return false;
  }
}

// Test de r√©utilisation de token r√©voqu√©
async function testTokenReuse(token) {
  try {
    logInfo('üîç Test de r√©utilisation de token r√©voqu√©...');
    
    const headers = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };
    
    // Essayer d'acc√©der √† une route prot√©g√©e avec le token r√©voqu√©
    const response = await axios.get(`${BASE_URL}/access/patient/status`, { headers });
    
    if (response.status === 401) {
      logSuccess('Token r√©voqu√© correctement rejet√© (401 Unauthorized)');
      return true;
    } else {
      logError(`Token r√©voqu√© accept√© avec le statut: ${response.status}`);
      return false;
    }
  } catch (error) {
    if (error.response && error.response.status === 401) {
      logSuccess('Token r√©voqu√© correctement rejet√© (401 Unauthorized)');
      return true;
    } else {
      logError(`Erreur lors du test de r√©utilisation: ${error.message}`);
      return false;
    }
  }
}

// Test principal
async function runTests() {
  log('üöÄ D√©marrage des tests de gestion des tokens Redis', 'bright');
  log('=' * 60, 'cyan');
  
  try {
    // Test 1: Connexion Redis
    const redisOk = await testRedisConnection();
    if (!redisOk) {
      logError('Tests arr√™t√©s: Redis non disponible');
      return;
    }
    
    log('', 'reset');
    
    // Test 2: G√©n√©ration de token
    const tokenGenOk = await testTokenGeneration();
    if (!tokenGenOk) {
      logError('Tests arr√™t√©s: G√©n√©ration de token √©chou√©e');
      return;
    }
    
    log('', 'reset');
    
    // Test 3: Connexion patient
    const loginResult = await testPatientLogin();
    if (!loginResult || !loginResult.token) {
      logError('Tests arr√™t√©s: Connexion patient √©chou√©e');
      return;
    }
    
    const { token, patient } = loginResult;
    log('', 'reset');
    
    // Test 4: Acc√®s √† une route prot√©g√©e
    const accessOk = await testProtectedRoute(token, patient.id_patient);
    if (!accessOk) {
      logError('Tests arr√™t√©s: Acc√®s √† la route prot√©g√©e √©chou√©');
      return;
    }
    
    log('', 'reset');
    
    // Test 5: D√©connexion
    const logoutOk = await testPatientLogout(token);
    if (!logoutOk) {
      logError('Tests arr√™t√©s: D√©connexion √©chou√©e');
      return;
    }
    
    log('', 'reset');
    
    // Test 6: R√©utilisation de token r√©voqu√©
    const reuseOk = await testTokenReuse(token);
    if (!reuseOk) {
      logError('Tests arr√™t√©s: Test de r√©utilisation √©chou√©');
      return;
    }
    
    log('', 'reset');
    
    // R√©sum√©
    log('üéâ Tous les tests sont pass√©s avec succ√®s !', 'bright');
    log('‚úÖ La gestion des tokens Redis fonctionne correctement', 'green');
    log('‚úÖ Les tokens sont stock√©s dans Redis lors de la connexion', 'green');
    log('‚úÖ Les tokens sont valid√©s dans Redis pour les routes prot√©g√©es', 'green');
    log('‚úÖ Les tokens sont r√©voqu√©s dans Redis lors de la d√©connexion', 'green');
    log('‚úÖ Les tokens r√©voqu√©s sont rejet√©s', 'green');
    
  } catch (error) {
    logError(`Erreur g√©n√©rale lors des tests: ${error.message}`);
  } finally {
    // Fermer la connexion Redis
    await redis.quit();
    log('üîå Connexion Redis ferm√©e', 'cyan');
  }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = {
  testRedisConnection,
  testTokenGeneration,
  testPatientLogin,
  testProtectedRoute,
  testPatientLogout,
  testTokenReuse,
  runTests
};

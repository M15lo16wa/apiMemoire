const { sequelize } = require('./src/config/database');

async function check2FATables() {
  try {
    console.log('üîç V√©rification de la structure des tables 2FA...\n');
    
    // V√©rifier la table Historique2FA
    console.log('1Ô∏è‚É£ V√©rification de la table Historique2FA...');
    const [historiqueColumns] = await sequelize.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'Historique2FA'
      ORDER BY ordinal_position;
    `);
    
    if (historiqueColumns.length === 0) {
      console.log('‚ùå Table Historique2FA n\'existe pas !');
    } else {
      console.log('‚úÖ Table Historique2FA existe avec les colonnes:');
      historiqueColumns.forEach(col => {
        console.log(`   - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
      });
    }
    console.log('');

    // V√©rifier les champs 2FA dans la table Utilisateurs
    console.log('2Ô∏è‚É£ V√©rification des champs 2FA dans Utilisateurs...');
    const [utilisateurColumns] = await sequelize.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'Utilisateurs' 
      AND column_name LIKE 'two_factor%'
      ORDER BY ordinal_position;
    `);
    
    if (utilisateurColumns.length === 0) {
      console.log('‚ùå Aucun champ 2FA trouv√© dans Utilisateurs !');
    } else {
      console.log('‚úÖ Champs 2FA dans Utilisateurs:');
      utilisateurColumns.forEach(col => {
        console.log(`   - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
      });
    }
    console.log('');

    // V√©rifier les champs 2FA dans la table Patients
    console.log('3Ô∏è‚É£ V√©rification des champs 2FA dans Patients...');
    const [patientColumns] = await sequelize.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'Patients' 
      AND column_name LIKE 'two_factor%'
      ORDER BY ordinal_position;
    `);
    
    if (patientColumns.length === 0) {
      console.log('‚ùå Aucun champ 2FA trouv√© dans Patients !');
    } else {
      console.log('‚úÖ Champs 2FA dans Patients:');
      patientColumns.forEach(col => {
        console.log(`   - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
      });
    }
    console.log('');

    // V√©rifier les champs 2FA dans la table ProfessionnelsSante
    console.log('4Ô∏è‚É£ V√©rification des champs 2FA dans ProfessionnelsSante...');
    const [professionnelColumns] = await sequelize.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'ProfessionnelsSante' 
      AND column_name LIKE 'two_factor%'
      ORDER BY ordinal_position;
    `);
    
    if (professionnelColumns.length === 0) {
      console.log('‚ùå Aucun champ 2FA trouv√© dans ProfessionnelsSante !');
    } else {
      console.log('‚úÖ Champs 2FA dans ProfessionnelsSante:');
      professionnelColumns.forEach(col => {
        console.log(`   - ${col.column_name}: ${col.data_type} (nullable: ${col.is_nullable})`);
      });
    }
    console.log('');

    // V√©rifier l'√©tat des migrations
    console.log('5Ô∏è‚É£ V√©rification de l\'√©tat des migrations...');
    const [migrations] = await sequelize.query(`
      SELECT name, executed_at 
      FROM SequelizeMeta 
      WHERE name LIKE '%2fa%' OR name LIKE '%add-2fa%'
      ORDER BY executed_at DESC;
    `);
    
    if (migrations.length === 0) {
      console.log('‚ùå Aucune migration 2FA trouv√©e dans SequelizeMeta !');
    } else {
      console.log('‚úÖ Migrations 2FA trouv√©es:');
      migrations.forEach(mig => {
        console.log(`   - ${mig.name}: ex√©cut√©e le ${mig.executed_at}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message);
  } finally {
    await sequelize.close();
    console.log('\nüîå Connexion ferm√©e');
  }
}

check2FATables();

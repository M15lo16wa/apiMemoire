const { redis } = require('./src/config/redis');
const tokenService = require('./src/services/tokenService');

console.log('üîç Test direct du tokenService');
console.log('=' * 40);

async function testTokenServiceDirect() {
  try {
    // Test 1: G√©n√©ration de token
    console.log('\nüîê Test 1: G√©n√©ration de token');
    const mockUser = {
      id_patient: 999,
      nom: 'Test',
      prenom: 'User',
      role: 'patient'
    };
    
    const token = await tokenService.generateAndStoreToken(mockUser, 'patient');
    console.log('‚úÖ Token g√©n√©r√©:', token.substring(0, 30) + '...');
    
    // Test 2: Validation du token
    console.log('\nüîç Test 2: Validation du token');
    const validation = await tokenService.validateToken(token);
    console.log('‚úÖ Token valid√©:', !!validation);
    if (validation) {
      console.log('  - ID:', validation.id);
      console.log('  - Role:', validation.role);
      console.log('  - Type:', validation.type);
    }
    
    // Test 3: V√©rification des cl√©s Redis
    console.log('\nüîç Test 3: V√©rification des cl√©s Redis');
    const tokenKey = `token:${token}`;
    const sessionKey = `session:${mockUser.id_patient}`;
    const blacklistKey = `blacklist:${token}`;
    
    const tokenInRedis = await redis.get(tokenKey);
    const sessionInRedis = await redis.get(sessionKey);
    const blacklistInRedis = await redis.exists(blacklistKey);
    
    console.log('  - Token dans Redis:', !!tokenInRedis);
    console.log('  - Session dans Redis:', !!sessionInRedis);
    console.log('  - Token dans blacklist:', !!blacklistInRedis);
    
    // Test 4: R√©vocation du token
    console.log('\nüö´ Test 4: R√©vocation du token');
    const revokeResult = await tokenService.revokeToken(token, mockUser.id_patient);
    console.log('‚úÖ R√©vocation:', revokeResult);
    
    // Test 5: V√©rification apr√®s r√©vocation
    console.log('\nüîç Test 5: V√©rification apr√®s r√©vocation');
    
    // Attendre un peu
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const tokenAfterRevoke = await redis.get(tokenKey);
    const sessionAfterRevoke = await redis.get(sessionKey);
    const blacklistAfterRevoke = await redis.exists(blacklistKey);
    
    console.log('  - Token dans Redis apr√®s r√©vocation:', !!tokenAfterRevoke);
    console.log('  - Session dans Redis apr√®s r√©vocation:', !!sessionAfterRevoke);
    console.log('  - Token dans blacklist apr√®s r√©vocation:', !!blacklistAfterRevoke);
    
    // Test 6: Validation apr√®s r√©vocation
    console.log('\nüîç Test 6: Validation apr√®s r√©vocation');
    const validationAfterRevoke = await tokenService.validateToken(token);
    console.log('‚úÖ Token valid√© apr√®s r√©vocation:', !!validationAfterRevoke);
    
    if (validationAfterRevoke) {
      console.log('‚ùå ERREUR: Token toujours valide apr√®s r√©vocation !');
    } else {
      console.log('‚úÖ Token correctement invalid√©');
    }
    
    // Nettoyage
    await redis.quit();
    console.log('\nüîå Connexion Redis ferm√©e');
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    console.error('Stack:', error.stack);
  }
}

// Ex√©cuter le test
testTokenServiceDirect().catch(console.error);

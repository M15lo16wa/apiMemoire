const { Prescription } = require('./src/models');

async function testPrescriptionModel() {
  try {
    console.log('üß™ Test du mod√®le Prescription...\n');

    // Test 1: Cr√©er une ordonnance
    console.log('üìù Test 1: Cr√©ation d\'une ordonnance');
    const ordonnance = await Prescription.create({
      type_prescription: 'ordonnance',
      principe_actif: 'Parac√©tamol',
      nom_commercial: 'Doliprane',
      dosage: '500mg',
      forme_pharmaceutique: 'comprim√©',
      quantite: 20,
      unite: 'comprim√©s',
      posologie: '1 comprim√© toutes les 6 heures',
      frequence: '4 fois par jour',
      voie_administration: 'orale',
      statut: 'active',
      patient_id: 1,
      professionnel_id: 1,
      instructions_speciales: '√Ä prendre avec un verre d\'eau',
      duree_traitement: '5 jours'
    });

    console.log('‚úÖ Ordonnance cr√©√©e:', {
      id: ordonnance.id_prescription,
      numero: ordonnance.prescriptionNumber,
      type: ordonnance.type_prescription,
      principe: ordonnance.principe_actif,
      qrCode: ordonnance.qrCode ? 'G√©n√©r√©' : 'Non g√©n√©r√©'
    });

    // Test 2: Cr√©er une demande d'examen
    console.log('\nüî¨ Test 2: Cr√©ation d\'une demande d\'examen');
    const examen = await Prescription.create({
      type_prescription: 'examen',
      principe_actif: 'Analyse sanguine compl√®te',
      dosage: 'Pr√©l√®vement veineux',
      frequence: 'Urgent',
      statut: 'en_attente',
      patient_id: 1,
      professionnel_id: 1,
      instructions_speciales: '√Ä jeun depuis 12 heures',
      duree_traitement: '1 jour'
    });

    console.log('‚úÖ Demande d\'examen cr√©√©e:', {
      id: examen.id_prescription,
      numero: examen.prescriptionNumber,
      type: examen.type_prescription,
      principe: examen.principe_actif,
      qrCode: examen.qrCode ? 'G√©n√©r√©' : 'Non g√©n√©r√©'
    });

    // Test 3: Rechercher les prescriptions
    console.log('\nüîç Test 3: Recherche des prescriptions');
    const prescriptions = await Prescription.findAll({
      where: { patient_id: 1 },
      order: [['date_prescription', 'DESC']]
    });

    console.log(`‚úÖ ${prescriptions.length} prescriptions trouv√©es pour le patient 1`);

    // Test 4: Rechercher par type
    console.log('\nüìä Test 4: Recherche par type de prescription');
    const ordonnances = await Prescription.count({
      where: { type_prescription: 'ordonnance' }
    });
    const examens = await Prescription.count({
      where: { type_prescription: 'examen' }
    });

    console.log(`‚úÖ Ordonnances: ${ordonnances}, Examens: ${examens}`);

    // Test 5: Rechercher par statut
    console.log('\nüìà Test 5: Recherche par statut');
    const actives = await Prescription.count({
      where: { statut: 'active' }
    });
    const enAttente = await Prescription.count({
      where: { statut: 'en_attente' }
    });

    console.log(`‚úÖ Actives: ${actives}, En attente: ${enAttente}`);

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s!');
    console.log('‚úÖ Le mod√®le Prescription est maintenant synchronis√© et fonctionnel.');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

testPrescriptionModel(); 
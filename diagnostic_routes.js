/**
 * Script de diagnostic des routes
 */

console.log('üîç Diagnostic des routes de l\'application\n');

try {
    // Charger l'application
    const app = require('./src/app.js');
    console.log('‚úÖ Application charg√©e avec succ√®s');
    
    // V√©rifier la structure des routes
    if (app._router && app._router.stack) {
        console.log(`üìä Nombre total de layers: ${app._router.stack.length}`);
        
        // Analyser les layers
        let routeCount = 0;
        let routerCount = 0;
        
        app._router.stack.forEach((layer, index) => {
            if (layer.route) {
                routeCount++;
                console.log(`  Route ${routeCount}: ${Object.keys(layer.route.methods).join(',')} ${layer.route.path}`);
            } else if (layer.name === 'router') {
                routerCount++;
                console.log(`  Router ${routerCount}: ${layer.regexp}`);
            }
        });
        
        console.log(`\nüìà R√©sum√©:`);
        console.log(`  - Routes directes: ${routeCount}`);
        console.log(`  - Routers mont√©s: ${routerCount}`);
        
        // V√©rifier sp√©cifiquement les routes patient
        console.log(`\nüîç V√©rification des routes patient:`);
        const patientRoutes = app._router.stack.filter(layer => 
            layer.name === 'router' && 
            layer.regexp && 
            layer.regexp.toString().includes('patient')
        );
        
        if (patientRoutes.length > 0) {
            console.log(`  ‚úÖ Routes patient trouv√©es: ${patientRoutes.length}`);
            patientRoutes.forEach((router, i) => {
                console.log(`    Router patient ${i + 1}: ${router.regexp}`);
            });
        } else {
            console.log(`  ‚ùå Aucune route patient trouv√©e`);
        }
        
    } else {
        console.log('‚ùå Structure des routes non trouv√©e');
    }
    
} catch (error) {
    console.log('‚ùå Erreur lors du chargement:', error.message);
}

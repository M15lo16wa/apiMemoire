const { Prescription, Patient, ProfessionnelSante, DossierMedical, Utilisateur } = require('./src/models');

async function testAssociations() {
  try {
    console.log('üß™ Test des associations du mod√®le Prescription...\n');

    // Test 1: V√©rifier si les associations sont d√©finies
    console.log('üìã Associations disponibles:');
    console.log('Prescription.associations:', Object.keys(Prescription.associations));
    
    // Test 2: Cr√©er une prescription simple
    console.log('\nüìù Test 2: Cr√©ation d\'une prescription simple');
    const prescription = await Prescription.create({
      type_prescription: 'ordonnance',
      principe_actif: 'Test M√©dicament',
      dosage: '100mg',
      frequence: '2 fois par jour',
      patient_id: 1,
      professionnel_id: 1,
      statut: 'active'
    });

    console.log('‚úÖ Prescription cr√©√©e:', {
      id: prescription.id_prescription,
      numero: prescription.prescriptionNumber,
      type: prescription.type_prescription
    });

    // Test 3: R√©cup√©rer avec associations
    console.log('\nüîç Test 3: R√©cup√©ration avec associations');
    const prescriptionWithAssociations = await Prescription.findByPk(prescription.id_prescription, {
      include: [
        {
          model: Patient,
          as: 'patient',
          attributes: ['id_patient', 'nom', 'prenom']
        },
        {
          model: ProfessionnelSante,
          as: 'redacteur',
          attributes: ['id_professionnel', 'numero_adeli', 'specialite'],
          include: [{
            model: Utilisateur,
            as: 'compteUtilisateur',
            attributes: ['nom', 'prenom']
          }]
        },
        {
          model: DossierMedical,
          as: 'dossier',
          attributes: ['id_dossier', 'numeroDossier']
        }
      ]
    });

    if (prescriptionWithAssociations) {
      console.log('‚úÖ Prescription avec associations r√©cup√©r√©e:');
      console.log('  - Patient:', prescriptionWithAssociations.patient ? 'OK' : 'NON TROUV√â');
      console.log('  - R√©dacteur:', prescriptionWithAssociations.redacteur ? 'OK' : 'NON TROUV√â');
      console.log('  - Dossier:', prescriptionWithAssociations.dossier ? 'OK' : 'NON TROUV√â');
    } else {
      console.log('‚ùå Prescription non trouv√©e');
    }

    // Test 4: V√©rifier les erreurs sp√©cifiques
    console.log('\nüîß Test 4: V√©rification des erreurs');
    try {
      const prescriptionError = await Prescription.findByPk(999999, {
        include: [
          {
            model: Patient,
            as: 'patient'
          }
        ]
      });
      console.log('‚úÖ Pas d\'erreur avec ID inexistant');
    } catch (error) {
      console.log('‚ùå Erreur avec ID inexistant:', error.message);
    }

    console.log('\nüéâ Tests termin√©s!');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

testAssociations(); 
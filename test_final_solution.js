const axios = require('axios');
const { redis } = require('./src/config/redis');

// Configuration
const BASE_URL = 'http://localhost:3000/api';
const TEST_PATIENT = {
  numero_assure: 'TEMP000005',
  mot_de_passe: 'passer123'
};

console.log('üéØ Test final de la solution compl√®te');
console.log('=' * 50);

async function testFinalSolution() {
  try {
    console.log('üîç V√©rification de la configuration...');
    console.log('  - JWT_SECRET d√©fini:', !!process.env.JWT_SECRET);
    console.log('  - REDIS_HOST:', process.env.REDIS_HOST || 'localhost');
    console.log('  - REDIS_PORT:', process.env.REDIS_PORT || 6379);

    // √âTAPE 1: Connexion patient
    console.log('\nüîê √âTAPE 1: Connexion patient');
    const loginResponse = await axios.post(`${BASE_URL}/patient/auth/login`, TEST_PATIENT);
    const token = loginResponse.data.token;
    const patientId = loginResponse.data.data.patient.id_patient;
    
    console.log('‚úÖ Connexion r√©ussie');
    console.log(`  - Patient ID: ${patientId}`);
    console.log(`  - Token: ${token.substring(0, 30)}...`);

    // V√©rifier la structure du token
    const tokenParts = token.split('.');
    if (tokenParts.length === 3) {
      const payload = JSON.parse(Buffer.from(tokenParts[1], 'base64').toString());
      console.log(`  - Token Role: ${payload.role}`);
      console.log(`  - Token Type: ${payload.type}`);
    }

    // √âTAPE 2: Acc√®s aux routes prot√©g√©es
    console.log('\nüîí √âTAPE 2: Acc√®s aux routes prot√©g√©es');
    const headers = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };

    // Test d'acc√®s
    try {
      const accessResponse = await axios.get(`${BASE_URL}/dossierMedical/patient/${patientId}/complet`, { headers });
      console.log('‚úÖ Acc√®s r√©ussi (200)');
    } catch (error) {
      console.log(`‚ùå Acc√®s √©chou√©: ${error.response?.status}`);
      return;
    }

    // √âTAPE 3: D√©connexion
    console.log('\nüö™ √âTAPE 3: D√©connexion');
    console.log('  - Appel de /patient/auth/logout...');
    
    try {
      const logoutResponse = await axios.post(`${BASE_URL}/patient/auth/logout`, {}, { headers });
      console.log(`  - D√©connexion: ${logoutResponse.status} - ${logoutResponse.data.message}`);
    } catch (error) {
      console.log(`‚ùå Erreur d√©connexion: ${error.response?.status}`);
      return;
    }

    // √âTAPE 4: V√©rification de l'√©tat Redis
    console.log('\nüîç √âTAPE 4: V√©rification de l\'√©tat Redis');
    
    // Attendre un peu pour s'assurer que Redis a trait√© les commandes
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const tokenKey = `token:${token}`;
    const sessionKey = `session:${patientId}`;
    const blacklistKey = `blacklist:${token}`;
    
    const tokenInRedis = await redis.get(tokenKey);
    const sessionInRedis = await redis.get(sessionKey);
    const blacklistInRedis = await redis.exists(blacklistKey);
    
    console.log('  - Token dans Redis apr√®s logout:', !!tokenInRedis);
    console.log('  - Session dans Redis apr√®s logout:', !!sessionInRedis);
    console.log('  - Token dans blacklist apr√®s logout:', !!blacklistInRedis);

    // √âTAPE 5: Test d'acc√®s avec token r√©voqu√©
    console.log('\nüö´ √âTAPE 5: Test d\'acc√®s avec token r√©voqu√©');
    try {
      const reuseResponse = await axios.get(`${BASE_URL}/dossierMedical/patient/${patientId}/complet`, { headers });
      console.log(`‚ùå ERREUR: Token r√©voqu√© accept√© (${reuseResponse.status})`);
      
      // Si on arrive ici, il y a un probl√®me
      console.log('\nüîç ANALYSE DU PROBL√àME:');
      console.log('  - Le token est encore accept√© par l\'API');
      console.log('  - Cela signifie que la r√©vocation ne fonctionne pas');
      console.log('  - V√©rifiez les logs du serveur pour plus de d√©tails');
      
    } catch (error) {
      if (error.response?.status === 401) {
        console.log('‚úÖ Token r√©voqu√© correctement rejet√© (401 Unauthorized)');
        console.log(`  - Message: ${error.response.data.message || 'Token invalide'}`);
        
        // SUCC√àS ! Testons la reconnexion
        console.log('\nüîÑ Test de reconnexion...');
        try {
          const reloginResponse = await axios.post(`${BASE_URL}/patient/auth/login`, TEST_PATIENT);
          if (reloginResponse.status === 200 && reloginResponse.data.token) {
            console.log('‚úÖ Reconnexion r√©ussie');
            console.log('üéâ TOUS LES TESTS SONT PASS√âS !');
            console.log('üîê La gestion des tokens Redis fonctionne parfaitement !');
          } else {
            console.log('‚ùå Reconnexion √©chou√©e');
          }
        } catch (reloginError) {
          console.log(`‚ùå Erreur reconnexion: ${reloginError.response?.status}`);
        }
      } else {
        console.log(`‚ö†Ô∏è  R√©ponse inattendue: ${error.response?.status}`);
      }
    }

    // Nettoyage
    await redis.quit();
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
    if (error.response) {
      console.error('  - Status:', error.response.status);
      console.error('  - Message:', error.response.data.message || error.response.statusText);
    }
  }
}

// Ex√©cuter le test final
testFinalSolution().catch(console.error);

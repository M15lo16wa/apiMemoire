require('dotenv').config();
const { redis, testConnection } = require('./src/config/redis');
const tokenService = require('./src/services/tokenService');

async function testRedisConnection() {
  console.log('üß™ Test de connexion Redis...\n');
  
  try {
    // Test de connexion basique
    const isConnected = await testConnection();
    if (!isConnected) {
      console.log('‚ùå Impossible de se connecter √† Redis');
      return;
    }
    
    console.log('‚úÖ Connexion Redis r√©ussie\n');
    
    // Test du service de tokens
    console.log('üß™ Test du service de tokens...\n');
    
    // Simuler un utilisateur
    const mockUser = {
      id: 123,
      nom: 'Test',
      prenom: 'User',
      role: 'test'
    };
    
    // Test de g√©n√©ration de token
    console.log('1. Test de g√©n√©ration de token...');
    const token = await tokenService.generateAndStoreToken(mockUser, 'test');
    console.log(`‚úÖ Token g√©n√©r√©: ${token.substring(0, 20)}...\n`);
    
    // Test de validation de token
    console.log('2. Test de validation de token...');
    const validation = await tokenService.validateToken(token);
    if (validation) {
      console.log('‚úÖ Token valid√© avec succ√®s');
      console.log(`   - ID utilisateur: ${validation.id}`);
      console.log(`   - Type: ${validation.type}`);
      console.log(`   - R√¥le: ${validation.role}\n`);
    } else {
      console.log('‚ùå √âchec de validation du token');
      return;
    }
    
    // Test de v√©rification de session
    console.log('3. Test de v√©rification de session...');
    const hasSession = await tokenService.hasActiveSession(mockUser.id);
    console.log(`‚úÖ Session active: ${hasSession}\n`);
    
    // Test de r√©cup√©ration de session
    console.log('4. Test de r√©cup√©ration de session...');
    const session = await tokenService.getUserSession(mockUser.id);
    if (session) {
      console.log('‚úÖ Session r√©cup√©r√©e:');
      console.log(`   - Token: ${session.token.substring(0, 20)}...`);
      console.log(`   - Type: ${session.userType}`);
      console.log(`   - R√¥le: ${session.role}\n`);
    } else {
      console.log('‚ùå Impossible de r√©cup√©rer la session');
    }
    
    // Test de r√©vocation de token
    console.log('5. Test de r√©vocation de token...');
    const revoked = await tokenService.revokeToken(token, mockUser.id);
    if (revoked) {
      console.log('‚úÖ Token r√©voqu√© avec succ√®s\n');
    } else {
      console.log('‚ùå √âchec de r√©vocation du token');
    }
    
    // Test de validation apr√®s r√©vocation
    console.log('6. Test de validation apr√®s r√©vocation...');
    const validationAfterRevoke = await tokenService.validateToken(token);
    if (!validationAfterRevoke) {
      console.log('‚úÖ Token correctement invalid√© apr√®s r√©vocation\n');
    } else {
      console.log('‚ùå Token toujours valide apr√®s r√©vocation');
    }
    
    // Test des statistiques
    console.log('7. Test des statistiques Redis...');
    const stats = await tokenService.getStats();
    if (stats) {
      console.log('‚úÖ Statistiques r√©cup√©r√©es:');
      console.log(`   - Total des cl√©s: ${stats.totalKeys}`);
      console.log(`   - Tokens actifs: ${stats.activeTokens}`);
      console.log(`   - Sessions actives: ${stats.activeSessions}`);
      console.log(`   - Tokens blacklist√©s: ${stats.blacklistedTokens}\n`);
    } else {
      console.log('‚ùå Impossible de r√©cup√©rer les statistiques');
    }
    
    console.log('üéâ Tous les tests Redis sont pass√©s avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  } finally {
    // Fermer la connexion Redis
    await redis.quit();
    console.log('üîå Connexion Redis ferm√©e');
  }
}

// Ex√©cuter les tests
testRedisConnection().catch(console.error);

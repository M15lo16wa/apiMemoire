const axios = require('axios');

// Configuration
const BASE_URL = 'http://localhost:3000/api';
const PATIENT_ID = 5;

// Token du patient 5 (g√©n√©r√©)
const PATIENT_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NSwiaWRfcGF0aWVudCI6NSwicm9sZSI6InBhdGllbnQiLCJ0eXBlIjoicGF0aWVudCIsIm5vbSI6IlBhdGllbnQiLCJwcmVub20iOiJUZXN0IiwiaWF0IjoxNzU1MDQwODMzLCJleHAiOjE3NTUxMjcyMzN9.mxToSc6mKPFtKA5lPyXReXnwEn8';

async function testPatientAccessStatus() {
  try {
    console.log('üîç Test d\'acc√®s du patient 5 √† son statut d\'acc√®s...');
    
    // Test 1: Acc√®s au statut d'acc√®s du patient (nouvelle route)
    console.log('\nüìã Test 1: Acc√®s au statut d\'acc√®s du patient (nouvelle route)');
    try {
      const response = await axios.get(`${BASE_URL}/access/patient/status`, {
        headers: {
          'Authorization': `Bearer ${PATIENT_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log('‚úÖ Succ√®s! Status:', response.status);
      console.log('üìä Donn√©es re√ßues:', response.data.status);
      console.log('üÜî Patient ID:', response.data.data.patient_id);
      console.log('üìà R√©sum√©:', response.data.data.summary);
      
    } catch (error) {
      console.error('‚ùå Erreur statut patient:', error.response?.status, error.response?.data?.message || error.message);
    }
    
    // Test 2: Tentative d'acc√®s √† l'ancienne route (doit √©chouer)
    console.log('\nüìã Test 2: Tentative d\'acc√®s √† l\'ancienne route (doit √©chouer)');
    try {
      const response = await axios.get(`${BASE_URL}/access/status/${PATIENT_ID}`, {
        headers: {
          'Authorization': `Bearer ${PATIENT_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log('‚ùå Erreur: Le patient a pu acc√©der √† la route professionnelle!');
      
    } catch (error) {
      if (error.response?.status === 403) {
        console.log('‚úÖ Correct: Acc√®s refus√© √† la route professionnelle');
      } else {
        console.error('‚ùå Erreur inattendue:', error.response?.status, error.response?.data?.message || error.message);
      }
    }
    
    // Test 3: Tentative d'acc√®s au statut d'un autre patient (doit √©chouer)
    console.log('\nüìã Test 3: Tentative d\'acc√®s au statut d\'un autre patient (doit √©chouer)');
    try {
      const response = await axios.get(`${BASE_URL}/access/patient/status`, {
        headers: {
          'Authorization': `Bearer ${PATIENT_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      
      // V√©rifier que le patient ne peut voir que ses propres donn√©es
      if (response.data.data.patient_id === PATIENT_ID) {
        console.log('‚úÖ Correct: Le patient ne peut voir que ses propres donn√©es');
      } else {
        console.log('‚ùå Erreur: Le patient peut voir les donn√©es d\'un autre patient!');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur inattendue:', error.response?.status, error.response?.data?.message || error.message);
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// Ex√©cuter le test
testPatientAccessStatus();

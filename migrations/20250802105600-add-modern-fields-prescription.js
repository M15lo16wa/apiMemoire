'use strict';

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    try {
      // Ajouter le champ type_prescription
      await queryInterface.addColumn('Prescriptions', 'type_prescription', {
        type: Sequelize.ENUM('ordonnance', 'examen'),
        allowNull: false,
        defaultValue: 'ordonnance',
        comment: 'Type de prescription: ordonnance m√©dicamenteuse ou demande d\'examen'
      });
      console.log('‚úÖ Colonne type_prescription ajout√©e');

      // Ajouter le champ principe_actif
      await queryInterface.addColumn('Prescriptions', 'principe_actif', {
        type: Sequelize.STRING(255),
        allowNull: true, // Temporairement nullable pour la migration
        comment: 'Principe actif (DCI) ou type d\'examen demand√©'
      });
      console.log('‚úÖ Colonne principe_actif ajout√©e');

      // Ajouter le champ instructions_speciales
      await queryInterface.addColumn('Prescriptions', 'instructions_speciales', {
        type: Sequelize.TEXT,
        allowNull: true,
        comment: 'Instructions particuli√®res (√† jeun, pendant le repas, etc.)'
      });
      console.log('‚úÖ Colonne instructions_speciales ajout√©e');

      // Ajouter le champ duree_traitement
      await queryInterface.addColumn('Prescriptions', 'duree_traitement', {
        type: Sequelize.STRING(100),
        allowNull: true,
        comment: 'Dur√©e du traitement (ex: 7 jours, 1 mois)'
      });
      console.log('‚úÖ Colonne duree_traitement ajout√©e');

      // Modifier prescriptionNumber pour le rendre nullable (sera g√©n√©r√© automatiquement)
      await queryInterface.changeColumn('Prescriptions', 'prescriptionNumber', {
        type: Sequelize.STRING(50),
        allowNull: true,
        unique: true,
        comment: 'Num√©ro unique de prescription g√©n√©r√© automatiquement'
      });
      console.log('‚úÖ Colonne prescriptionNumber modifi√©e');

      // Am√©liorer les commentaires des colonnes existantes
      await queryInterface.changeColumn('Prescriptions', 'pharmacieDelivrance', {
        type: Sequelize.STRING(255),
        allowNull: true,
        comment: 'Pharmacie o√π les m√©dicaments ont √©t√© d√©livr√©s'
      });

      await queryInterface.changeColumn('Prescriptions', 'signatureElectronique', {
        type: Sequelize.TEXT,
        allowNull: true,
        comment: 'Signature √©lectronique du m√©decin prescripteur'
      });

      await queryInterface.changeColumn('Prescriptions', 'qrCode', {
        type: Sequelize.TEXT,
        allowNull: true,
        comment: 'QR Code pour v√©rification et tra√ßabilit√©'
      });

      // Ajouter des index pour optimiser les performances
      await queryInterface.addIndex('Prescriptions', ['type_prescription', 'statut'], {
        name: 'idx_prescriptions_type_statut'
      });
      console.log('‚úÖ Index type_prescription_statut ajout√©');

      await queryInterface.addIndex('Prescriptions', ['patient_id', 'date_prescription'], {
        name: 'idx_prescriptions_patient_date'
      });
      console.log('‚úÖ Index patient_date ajout√©');

      await queryInterface.addIndex('Prescriptions', ['professionnel_id', 'date_prescription'], {
        name: 'idx_prescriptions_professionnel_date'
      });
      console.log('‚úÖ Index professionnel_date ajout√©');

      console.log('üéâ Migration des champs modernes termin√©e avec succ√®s');

    } catch (error) {
      console.error('‚ùå Erreur lors de la migration:', error);
      throw error;
    }
  },

  async down(queryInterface, Sequelize) {
    try {
      // Supprimer les index ajout√©s
      await queryInterface.removeIndex('Prescriptions', 'idx_prescriptions_type_statut');
      await queryInterface.removeIndex('Prescriptions', 'idx_prescriptions_patient_date');
      await queryInterface.removeIndex('Prescriptions', 'idx_prescriptions_professionnel_date');
      console.log('‚úÖ Index supprim√©s');

      // Supprimer les nouvelles colonnes
      await queryInterface.removeColumn('Prescriptions', 'type_prescription');
      await queryInterface.removeColumn('Prescriptions', 'principe_actif');
      await queryInterface.removeColumn('Prescriptions', 'instructions_speciales');
      await queryInterface.removeColumn('Prescriptions', 'duree_traitement');
      console.log('‚úÖ Nouvelles colonnes supprim√©es');

      // Restaurer prescriptionNumber comme non-nullable
      await queryInterface.changeColumn('Prescriptions', 'prescriptionNumber', {
        type: Sequelize.STRING(50),
        allowNull: false,
        unique: true
      });
      console.log('‚úÖ Colonne prescriptionNumber restaur√©e');

      // Restaurer les colonnes existantes
      await queryInterface.changeColumn('Prescriptions', 'pharmacieDelivrance', {
        type: Sequelize.STRING,
        allowNull: true
      });

      await queryInterface.changeColumn('Prescriptions', 'signatureElectronique', {
        type: Sequelize.TEXT,
        allowNull: true
      });

      await queryInterface.changeColumn('Prescriptions', 'qrCode', {
        type: Sequelize.TEXT,
        allowNull: true
      });

      console.log('üîÑ Rollback de la migration termin√©');

    } catch (error) {
      console.error('‚ùå Erreur lors du rollback:', error);
      throw error;
    }
  }
};
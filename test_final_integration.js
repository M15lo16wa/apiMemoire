require('dotenv').config();
const { config, validateConfig, displayConfig, cleanupRedis, delay, logRedisOperation, logTokenOperation } = require('./test_integration_config');
const axios = require('axios');

// Configuration axios avec gestion des erreurs
const api = axios.create({
  baseURL: config.api.baseURL,
  timeout: config.api.timeout,
  validateStatus: () => true
});

// Variables globales pour les tests
let testResults = {
  total: 0,
  passed: 0,
  failed: 0,
  errors: []
};

// Fonction utilitaire pour les tests
function assert(condition, message) {
  testResults.total++;
  if (condition) {
    testResults.passed++;
    console.log(`‚úÖ ${message}`);
  } else {
    testResults.failed++;
    console.log(`‚ùå ${message}`);
    testResults.errors.push(message);
  }
}

// Fonction pour afficher les r√©sultats
function displayResults() {
  console.log('\nüìä R√©sultats des tests:');
  console.log(`   - Total: ${testResults.total}`);
  console.log(`   - R√©ussis: ${testResults.passed}`);
  console.log(`   - √âchou√©s: ${testResults.failed}`);
  console.log(`   - Taux de r√©ussite: ${((testResults.passed / testResults.total) * 100).toFixed(1)}%`);
  
  if (testResults.errors.length > 0) {
    console.log('\n‚ùå Erreurs d√©tect√©es:');
    testResults.errors.forEach((error, index) => {
      console.log(`   ${index + 1}. ${error}`);
    });
  }
}

// Test 1: Connexion Redis
async function testRedisConnection() {
  console.log('\nüî¥ Test 1: Connexion Redis');
  
  try {
    const { testConnection } = require('./src/config/redis');
    const isConnected = await testConnection();
    
    assert(isConnected, 'Connexion Redis √©tablie');
    
    if (isConnected) {
      logRedisOperation('connexion', { status: 'success' });
    }
  } catch (error) {
    assert(false, `Connexion Redis √©chou√©e: ${error.message}`);
  }
}

// Test 2: Service de tokens Redis
async function testTokenService() {
  console.log('\nüîê Test 2: Service de tokens Redis');
  
  try {
    const tokenService = require('./src/services/tokenService');
    
    // Test de g√©n√©ration de token
    const mockUser = { id: 999, nom: 'Test', prenom: 'User', role: 'test' };
    const token = await tokenService.generateAndStoreToken(mockUser, 'test');
    
    assert(!!token, 'Token g√©n√©r√© avec succ√®s');
    logTokenOperation('g√©n√©ration', token, { userId: mockUser.id });
    
    // Test de validation de token
    const validation = await tokenService.validateToken(token);
    assert(!!validation, 'Token valid√© avec succ√®s');
    
    // Test de r√©vocation de token
    const revoked = await tokenService.revokeToken(token, mockUser.id);
    assert(revoked, 'Token r√©voqu√© avec succ√®s');
    
    // Test de validation apr√®s r√©vocation
    const validationAfterRevoke = await tokenService.validateToken(token);
    assert(!validationAfterRevoke, 'Token correctement invalid√© apr√®s r√©vocation');
    
    logRedisOperation('tests_tokens', { 
      generated: !!token, 
      validated: !!validation, 
      revoked: revoked, 
      invalidAfterRevoke: !validationAfterRevoke 
    });
    
  } catch (error) {
    assert(false, `Service de tokens √©chou√©: ${error.message}`);
  }
}

// Test 3: API d'authentification
async function testAuthAPI() {
  console.log('\nüåê Test 3: API d\'authentification');
  
  try {
    // Test de connexion
    const loginResponse = await api.post('/auth/login', {
      email: config.testUsers.admin.email,
      mot_de_passe: config.testUsers.admin.mot_de_passe
    });
    
    assert(loginResponse.status === 200, 'Connexion API r√©ussie');
    
    if (loginResponse.status === 200 && loginResponse.data.token) {
      const token = loginResponse.data.token;
      logTokenOperation('connexion_api', token, { 
        userId: loginResponse.data.data.user.id_utilisateur 
      });
      
      // Test d'acc√®s √† une route prot√©g√©e
      const sessionResponse = await api.get('/auth/session', {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      assert(sessionResponse.status === 200, 'Acc√®s √† la route prot√©g√©e r√©ussi');
      
      // Test de d√©connexion
      const logoutResponse = await api.post('/auth/logout', {}, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      assert(logoutResponse.status === 200, 'D√©connexion API r√©ussie');
      
      // Test de r√©utilisation du token r√©voqu√©
      const reusedTokenResponse = await api.get('/auth/session', {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      assert(reusedTokenResponse.status === 401, 'Token correctement invalid√© apr√®s d√©connexion');
      
      logRedisOperation('tests_api', { 
        login: loginResponse.status === 200,
        session: sessionResponse.status === 200,
        logout: logoutResponse.status === 200,
        tokenInvalidated: reusedTokenResponse.status === 401
      });
      
    } else {
      assert(false, 'Token non re√ßu lors de la connexion');
    }
    
  } catch (error) {
    assert(false, `Tests API √©chou√©s: ${error.message}`);
  }
}

// Test 4: Gestion des sessions multiples
async function testMultipleSessions() {
  console.log('\nüîÑ Test 4: Gestion des sessions multiples');
  
  try {
    // Premi√®re connexion
    const login1Response = await api.post('/auth/login', {
      email: config.testUsers.admin.email,
      mot_de_passe: config.testUsers.admin.mot_de_passe
    });
    
    assert(login1Response.status === 200, 'Premi√®re connexion r√©ussie');
    
    if (login1Response.status === 200 && login1Response.data.token) {
      const token1 = login1Response.data.token;
      
      // Deuxi√®me connexion (m√™me utilisateur)
      const login2Response = await api.post('/auth/login', {
        email: config.testUsers.admin.email,
        mot_de_passe: config.testUsers.admin.mot_de_passe
      });
      
      assert(login2Response.status === 200, 'Deuxi√®me connexion r√©ussie');
      
      if (login2Response.status === 200 && login2Response.data.token) {
        const token2 = login2Response.data.token;
        
        // V√©rifier que les tokens sont diff√©rents
        assert(token1 !== token2, 'Tokens diff√©rents g√©n√©r√©s pour la m√™me session');
        
        // Test de d√©connexion de tous les appareils
        const logoutAllResponse = await api.post('/auth/logout-all-devices', {}, {
          headers: { Authorization: `Bearer ${token1}` }
        });
        
        assert(logoutAllResponse.status === 200, 'D√©connexion de tous les appareils r√©ussie');
        
        // V√©rifier que les deux tokens sont invalid√©s
        const token1Response = await api.get('/auth/session', {
          headers: { Authorization: `Bearer ${token1}` }
        });
        
        const token2Response = await api.get('/auth/session', {
          headers: { Authorization: `Bearer ${token2}` }
        });
        
        assert(token1Response.status === 401, 'Premier token invalid√© apr√®s d√©connexion globale');
        assert(token2Response.status === 401, 'Deuxi√®me token invalid√© apr√®s d√©connexion globale');
        
        logRedisOperation('tests_sessions_multiples', { 
          token1Valid: token1Response.status === 401,
          token2Valid: token2Response.status === 401,
          logoutAllSuccess: logoutAllResponse.status === 200
        });
      }
    }
    
  } catch (error) {
    assert(false, `Tests sessions multiples √©chou√©s: ${error.message}`);
  }
}

// Test 5: Statistiques Redis
async function testRedisStats() {
  console.log('\nüìä Test 5: Statistiques Redis');
  
  try {
    // Se reconnecter pour obtenir les statistiques
    const loginResponse = await api.post('/auth/login', {
      email: config.testUsers.admin.email,
      mot_de_passe: config.testUsers.admin.mot_de_passe
    });
    
    if (loginResponse.status === 200 && loginResponse.data.token) {
      const token = loginResponse.data.token;
      
      const statsResponse = await api.get('/auth/redis-stats', {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      assert(statsResponse.status === 200, 'Statistiques Redis r√©cup√©r√©es');
      
      if (statsResponse.status === 200) {
        const stats = statsResponse.data.data.stats;
        
        assert(typeof stats.totalKeys === 'number', 'Total des cl√©s est un nombre');
        assert(typeof stats.activeTokens === 'number', 'Tokens actifs est un nombre');
        assert(typeof stats.activeSessions === 'number', 'Sessions actives est un nombre');
        assert(typeof stats.blacklistedTokens === 'number', 'Tokens blacklist√©s est un nombre');
        
        console.log(`   üìà Statistiques Redis:`);
        console.log(`      - Total des cl√©s: ${stats.totalKeys}`);
        console.log(`      - Tokens actifs: ${stats.activeTokens}`);
        console.log(`      - Sessions actives: ${stats.activeSessions}`);
        console.log(`      - Tokens blacklist√©s: ${stats.blacklistedTokens}`);
        
        logRedisOperation('statistiques', stats);
      }
      
      // D√©connexion finale
      await api.post('/auth/logout', {}, {
        headers: { Authorization: `Bearer ${token}` }
      });
    }
    
  } catch (error) {
    assert(false, `Tests statistiques Redis √©chou√©s: ${error.message}`);
  }
}

// Test 6: Performance et robustesse
async function testPerformanceAndRobustness() {
  console.log('\n‚ö° Test 6: Performance et robustesse');
  
  try {
    const tokenService = require('./src/services/tokenService');
    
    // Test de g√©n√©ration de plusieurs tokens rapidement
    const startTime = Date.now();
    const promises = [];
    
    for (let i = 0; i < 10; i++) {
      const mockUser = { id: 1000 + i, nom: `Test${i}`, prenom: 'User', role: 'test' };
      promises.push(tokenService.generateAndStoreToken(mockUser, 'test'));
    }
    
    const tokens = await Promise.all(promises);
    const endTime = Date.now();
    const duration = endTime - startTime;
    
    assert(tokens.length === 10, 'G√©n√©ration de 10 tokens r√©ussie');
    assert(duration < 5000, `G√©n√©ration rapide (${duration}ms < 5000ms)`);
    
    // Test de validation en parall√®le
    const validationPromises = tokens.map(token => tokenService.validateToken(token));
    const validations = await Promise.all(validationPromises);
    
    assert(validations.every(v => !!v), 'Validation en parall√®le r√©ussie');
    
    // Nettoyage des tokens de test
    for (let i = 0; i < tokens.length; i++) {
      await tokenService.revokeToken(tokens[i], 1000 + i);
    }
    
    logRedisOperation('tests_performance', { 
      tokensGenerated: tokens.length,
      duration: duration,
      parallelValidation: validations.every(v => !!v)
    });
    
  } catch (error) {
    assert(false, `Tests performance √©chou√©s: ${error.message}`);
  }
}

// Fonction principale de test
async function runAllTests() {
  console.log('üöÄ D√©marrage des tests d\'int√©gration Redis\n');
  
  // Afficher la configuration
  displayConfig();
  
  // Valider la configuration
  if (!validateConfig()) {
    console.error('‚ùå Configuration invalide. Arr√™t des tests.');
    process.exit(1);
  }
  
  try {
    // Ex√©cuter tous les tests
    await testRedisConnection();
    await delay();
    
    await testTokenService();
    await delay();
    
    await testAuthAPI();
    await delay();
    
    await testMultipleSessions();
    await delay();
    
    await testRedisStats();
    await delay();
    
    await testPerformanceAndRobustness();
    
    // Afficher les r√©sultats
    displayResults();
    
    // Nettoyer Redis
    console.log('\nüßπ Nettoyage Redis...');
    await cleanupRedis();
    
    // Conclusion
    if (testResults.failed === 0) {
      console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !');
      console.log('‚úÖ L\'int√©gration Redis est op√©rationnelle.');
      console.log('üîê Les tokens sont maintenant g√©r√©s de mani√®re s√©curis√©e.');
      console.log('üö´ Les tokens r√©voqu√©s ne peuvent plus √™tre r√©utilis√©s.');
    } else {
      console.log('\n‚ö†Ô∏è  Certains tests ont √©chou√©.');
      console.log('üîß V√©rifiez la configuration et les logs d\'erreur.');
    }
    
  } catch (error) {
    console.error('\n‚ùå Erreur critique lors des tests:', error);
    process.exit(1);
  }
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Promesse rejet√©e non g√©r√©e:', reason);
  process.exit(1);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Exception non captur√©e:', error);
  process.exit(1);
});

// V√©rifier si axios est install√©
try {
  require('axios');
  runAllTests();
} catch (error) {
  console.log('üì¶ Installation d\'axios...');
  const { execSync } = require('child_process');
  try {
    execSync('npm install axios', { stdio: 'inherit' });
    console.log('‚úÖ Axios install√© avec succ√®s\n');
    runAllTests();
  } catch (installError) {
    console.error('‚ùå Erreur lors de l\'installation d\'axios:', installError.message);
    console.log('üí° Installez manuellement avec: npm install axios');
  }
}

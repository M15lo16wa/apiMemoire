/**
 * Script de test pour le module des auto-mesures
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3001/api';
const TEST_TOKEN = process.env.TEST_TOKEN || 'your_test_token_here';

// Configuration des headers
const getHeaders = () => ({
    'Authorization': `Bearer ${TEST_TOKEN}`,
    'Content-Type': 'application/json'
});

// Test de cr√©ation d'une auto-mesure
async function testCreateAutoMesure() {
    console.log('üß™ Test de cr√©ation d\'auto-mesure...');
    
    try {
        const autoMesureData = {
            type_mesure: 'glycemie',
            valeur: 95.0,
            unite: 'mg/dL',
            notes: 'Test de cr√©ation - mesure √† jeun'
        };

        const response = await axios.post(
            `${BASE_URL}/patient/auto-mesures`,
            autoMesureData,
            { headers: getHeaders() }
        );

        console.log('‚úÖ Auto-mesure cr√©√©e avec succ√®s');
        console.log('   ID:', response.data.data.id);
        console.log('   Type:', response.data.data.type_mesure);
        console.log('   Valeur:', response.data.data.valeur);
        
        return response.data.data.id;
    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation:', error.response?.data || error.message);
        return null;
    }
}

// Test de r√©cup√©ration d'une auto-mesure par ID
async function testGetAutoMesureById(id) {
    if (!id) {
        console.log('‚ö†Ô∏è Impossible de tester la r√©cup√©ration sans ID');
        return;
    }

    console.log(`\nüß™ Test de r√©cup√©ration de l'auto-mesure ${id}...`);
    
    try {
        const response = await axios.get(
            `${BASE_URL}/patient/auto-mesures/${id}`,
            { headers: getHeaders() }
        );

        console.log('‚úÖ Auto-mesure r√©cup√©r√©e avec succ√®s');
        console.log('   Type:', response.data.data.type_mesure);
        console.log('   Valeur:', response.data.data.valeur);
        console.log('   Patient ID:', response.data.data.patient_id);
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration:', error.response?.data || error.message);
    }
}

// Test de r√©cup√©ration de toutes les auto-mesures
async function testGetAllAutoMesures() {
    console.log('\nüß™ Test de r√©cup√©ration de toutes les auto-mesures...');
    
    try {
        const response = await axios.get(
            `${BASE_URL}/patient/auto-mesures`,
            { headers: getHeaders() }
        );

        console.log('‚úÖ Auto-mesures r√©cup√©r√©es avec succ√®s');
        console.log('   Nombre total:', response.data.results);
        console.log('   Premi√®re mesure:', response.data.data[0]?.type_mesure || 'Aucune');
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration:', error.response?.data || error.message);
    }
}

// Test de mise √† jour d'une auto-mesure
async function testUpdateAutoMesure(id) {
    if (!id) {
        console.log('‚ö†Ô∏è Impossible de tester la mise √† jour sans ID');
        return;
    }

    console.log(`\nüß™ Test de mise √† jour de l'auto-mesure ${id}...`);
    
    try {
        const updateData = {
            valeur: 98.0,
            notes: 'Test de mise √† jour - valeur modifi√©e'
        };

        const response = await axios.put(
            `${BASE_URL}/patient/auto-mesures/${id}`,
            updateData,
            { headers: getHeaders() }
        );

        console.log('‚úÖ Auto-mesure mise √† jour avec succ√®s');
        console.log('   Nouvelle valeur:', response.data.data.valeur);
        console.log('   Nouvelles notes:', response.data.data.notes);
    } catch (error) {
        console.error('‚ùå Erreur lors de la mise √† jour:', error.response?.data || error.message);
    }
}

// Test de r√©cup√©ration des auto-mesures d'un patient sp√©cifique
async function testGetAutoMesuresByPatient() {
    console.log('\nüß™ Test de r√©cup√©ration des auto-mesures par patient...');
    
    try {
        // Utiliser l'ID du patient connect√© ou un ID de test
        const patientId = 1; // Remplacez par un ID valide
        
        const response = await axios.get(
            `${BASE_URL}/patient/${patientId}/auto-mesures`,
            { headers: getHeaders() }
        );

        console.log('‚úÖ Auto-mesures du patient r√©cup√©r√©es avec succ√®s');
        console.log('   Patient ID:', patientId);
        console.log('   Nombre de mesures:', response.data.results);
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration par patient:', error.response?.data || error.message);
    }
}

// Test de r√©cup√©ration des statistiques
async function testGetAutoMesuresStats() {
    console.log('\nüß™ Test de r√©cup√©ration des statistiques...');
    
    try {
        const patientId = 1; // Remplacez par un ID valide
        
        const response = await axios.get(
            `${BASE_URL}/patient/${patientId}/auto-mesures/stats`,
            { headers: getHeaders() }
        );

        console.log('‚úÖ Statistiques r√©cup√©r√©es avec succ√®s');
        console.log('   Patient ID:', patientId);
        console.log('   Donn√©es:', response.data.data);
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des statistiques:', error.response?.data || error.message);
    }
}

// Test de r√©cup√©ration de la derni√®re mesure par type
async function testGetLastAutoMesureByType() {
    console.log('\nüß™ Test de r√©cup√©ration de la derni√®re mesure par type...');
    
    try {
        const patientId = 1; // Remplacez par un ID valide
        const typeMesure = 'glycemie';
        
        const response = await axios.get(
            `${BASE_URL}/patient/${patientId}/auto-mesures/last/${typeMesure}`,
            { headers: getHeaders() }
        );

        console.log('‚úÖ Derni√®re mesure r√©cup√©r√©e avec succ√®s');
        console.log('   Patient ID:', patientId);
        console.log('   Type:', typeMesure);
        console.log('   Valeur:', response.data.data.valeur);
    } catch (error) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration de la derni√®re mesure:', error.response?.data || error.message);
    }
}

// Test de suppression d'une auto-mesure
async function testDeleteAutoMesure(id) {
    if (!id) {
        console.log('‚ö†Ô∏è Impossible de tester la suppression sans ID');
        return;
    }

    console.log(`\nüß™ Test de suppression de l'auto-mesure ${id}...`);
    
    try {
        const response = await axios.delete(
            `${BASE_URL}/patient/auto-mesures/${id}`,
            { headers: getHeaders() }
        );

        console.log('‚úÖ Auto-mesure supprim√©e avec succ√®s');
        console.log('   Message:', response.data.message);
    } catch (error) {
        console.error('‚ùå Erreur lors de la suppression:', error.response?.data || error.message);
    }
}

// Fonction principale de test
async function runAllTests() {
    console.log('üöÄ D√©marrage des tests du module auto-mesures\n');

    if (TEST_TOKEN === 'your_test_token_here') {
        console.log('‚ö†Ô∏è D√©finissez TEST_TOKEN dans vos variables d\'environnement');
        console.log('   Exemple: export TEST_TOKEN="your_actual_token"');
        return;
    }

    try {
        // Tests CRUD
        const autoMesureId = await testCreateAutoMesure();
        await testGetAutoMesureById(autoMesureId);
        await testGetAllAutoMesures();
        await testUpdateAutoMesure(autoMesureId);
        
        // Tests sp√©cifiques
        await testGetAutoMesuresByPatient();
        await testGetAutoMesuresStats();
        await testGetLastAutoMesureByType();
        
        // Test de suppression
        await testDeleteAutoMesure(autoMesureId);

        console.log('\nüéâ Tous les tests sont termin√©s !');
        
    } catch (error) {
        console.error('\n‚ùå Erreur lors des tests:', error.message);
    }
}

// Ex√©cuter les tests si le script est appel√© directement
if (require.main === module) {
    runAllTests();
}

module.exports = {
    runAllTests,
    testCreateAutoMesure,
    testGetAutoMesureById,
    testUpdateAutoMesure,
    testDeleteAutoMesure
};

const { Patient } = require('../models');
const AppError = require('../utils/appError');
const catchAsync = require('../utils/catchAsync');

/**
 * Middleware to check if user is an authenticated patient
 */
exports.requirePatientAuth = catchAsync(async (req, res, next) => {
  console.log('‚û°Ô∏è [requirePatientAuth] user context', {
    hasUser: !!req.user,
    role: req.user?.role,
    type: req.user?.type,
    id: req.user?.id,
    id_patient: req.user?.id_patient
  });

  // Accepte si role === 'patient' (token patient)
  if (!req.user || !(req.user.role === 'patient' || req.user.type === 'patient')) {
    console.warn('‚ùå [requirePatientAuth] Acc√®s refus√©: utilisateur non patient ou non authentifi√©');
    return next(new AppError('Acc√®s r√©serv√© aux patients', 403));
  }

  // R√©cup√©rer l'identifiant patient
  const patientId = req.user.id_patient || req.user.id;
  if (!patientId) {
    console.warn('‚ùå [requirePatientAuth] Aucun identifiant patient d√©tect√© dans req.user');
    return next(new AppError('Patient non trouv√©', 404));
  }

  // Chercher le patient si non inject√© par un middleware pr√©c√©dent
  const patient = req.patient || await Patient.findByPk(patientId);
  console.log('üîé [requirePatientAuth] Patient charg√©?', !!patient, '| id:', patientId);
  
  if (!patient) {
    return next(new AppError('Patient non trouv√©', 404));
  }

  // Add patient info to request
  // req.patient = patient;
  next();
});

/**
 * Middleware to check if patient can access specific authorization
 */
exports.checkPatientAuthorizationAccess = catchAsync(async (req, res, next) => {
  const { authorizationId } = req.params;
  const patientId = req.patient.id_patient;

  console.log('‚û°Ô∏è [checkPatientAuthorizationAccess] Entr√©e', { authorizationId, patientId });

  if (!authorizationId) {
    return next(new AppError('ID d\'autorisation requis', 400));
  }

  // Verify that the authorization belongs to this patient
  const { AutorisationAcces } = require('../models');
  const autorisation = await AutorisationAcces.findOne({
    where: {
      id_acces: authorizationId,
      patient_id: patientId,
      statut: 'attente_validation'
    }
  });

  console.log('üîé [checkPatientAuthorizationAccess] Autorisation trouv√©e?', !!autorisation);

  if (!autorisation) {
    return next(new AppError('Demande d\'autorisation non trouv√©e ou d√©j√† trait√©e', 404));
  }

  // Add authorization info to request
  req.authorization = autorisation;
  next();
});

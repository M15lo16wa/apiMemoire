const axios = require('axios');

// Configuration
const BASE_URL = 'http://localhost:3000';
const TEST_TOKEN = 'VOTRE_TOKEN_ICI'; // Remplacez par un token valide

// Test de la route PATCH s√©curis√©e pour la modification d'autorisation
async function testRouteSecuriseeAuthorization() {
    try {
        console.log('üîí Test de la route PATCH s√©curis√©e pour la modification d\'autorisation');
        console.log('=' .repeat(70));
        
        if (!TEST_TOKEN || TEST_TOKEN === 'VOTRE_TOKEN_ICI') {
            console.log('‚ö†Ô∏è Token non configur√©, tests limit√©s');
            await testRouteAccessibility();
            return;
        }
        
        // 1. Test sans authentification (doit √©chouer)
        console.log('\nüîç Test 1: Acc√®s sans authentification (doit √©chouer)');
        try {
            const response = await axios.patch(`${BASE_URL}/api/access/authorization/999`, {
                statut: 'expire',
                raison_demande: 'Test sans token'
            });
            console.log('‚ùå Route accessible sans token (401 attendu)');
        } catch (error) {
            if (error.response?.status === 401) {
                console.log('‚úÖ Route correctement prot√©g√©e (401 re√ßu)');
            } else {
                console.log('‚ö†Ô∏è Erreur inattendue:', error.response?.status);
            }
        }
        
        // 2. Test avec token invalide (doit √©chouer)
        console.log('\nüîç Test 2: Acc√®s avec token invalide (doit √©chouer)');
        try {
            const response = await axios.patch(`${BASE_URL}/api/access/authorization/999`, {
                statut: 'expire',
                raison_demande: 'Test avec token invalide'
            }, {
                headers: {
                    'Authorization': 'Bearer token_invalide',
                    'Content-Type': 'application/json'
                }
            });
            console.log('‚ùå Route accessible avec token invalide (401 attendu)');
        } catch (error) {
            if (error.response?.status === 401) {
                console.log('‚úÖ Route correctement prot√©g√©e avec token invalide (401 re√ßu)');
            } else {
                console.log('‚ö†Ô∏è Erreur inattendue:', error.response?.status);
            }
        }
        
        // 3. Test avec token valide mais ID d'autorisation inexistant
        console.log('\nüîç Test 3: Acc√®s avec token valide mais autorisation inexistante (doit √©chouer)');
        try {
            const response = await axios.patch(`${BASE_URL}/api/access/authorization/999999`, {
                statut: 'expire',
                raison_demande: 'Test avec autorisation inexistante'
            }, {
                headers: {
                    'Authorization': `Bearer ${TEST_TOKEN}`,
                    'Content-Type': 'application/json'
                }
            });
            console.log('‚ùå Route accessible avec autorisation inexistante (404 attendu)');
        } catch (error) {
            if (error.response?.status === 404) {
                console.log('‚úÖ Route correctement g√®re l\'autorisation inexistante (404 re√ßu)');
            } else {
                console.log('‚ö†Ô∏è Erreur inattendue:', error.response?.status, error.response?.data);
            }
        }
        
        // 4. Test de validation des donn√©es (statut invalide)
        console.log('\nüîç Test 4: Validation des donn√©es - statut invalide (doit √©chouer)');
        try {
            const response = await axios.patch(`${BASE_URL}/api/access/authorization/999`, {
                statut: 'statut_invalide',
                raison_demande: 'Test avec statut invalide'
            }, {
                headers: {
                    'Authorization': `Bearer ${TEST_TOKEN}`,
                    'Content-Type': 'application/json'
                }
            });
            console.log('‚ùå Route accepte un statut invalide (400 attendu)');
        } catch (error) {
            if (error.response?.status === 400) {
                console.log('‚úÖ Route valide correctement le statut (400 re√ßu)');
                console.log('üìã Message d\'erreur:', error.response.data.message);
            } else {
                console.log('‚ö†Ô∏è Erreur inattendue:', error.response?.status);
            }
        }
        
        // 5. Test de validation - expiration sans raison
        console.log('\nüîç Test 5: Validation - expiration sans raison (doit √©chouer)');
        try {
            const response = await axios.patch(`${BASE_URL}/api/access/authorization/999`, {
                statut: 'expire'
                // Pas de raison_demande
            }, {
                headers: {
                    'Authorization': `Bearer ${TEST_TOKEN}`,
                    'Content-Type': 'application/json'
                }
            });
            console.log('‚ùå Route accepte l\'expiration sans raison (400 attendu)');
        } catch (error) {
            if (error.response?.status === 400) {
                console.log('‚úÖ Route valide correctement la raison pour l\'expiration (400 re√ßu)');
                console.log('üìã Message d\'erreur:', error.response.data.message);
            } else {
                console.log('‚ö†Ô∏è Erreur inattendue:', error.response?.status);
            }
        }
        
        // 6. Test de la structure de r√©ponse (si on a une autorisation valide)
        console.log('\nüîç Test 6: Structure de r√©ponse (si autorisation valide)');
        console.log('‚ÑπÔ∏è Ce test n√©cessite une autorisation valide dans votre base de donn√©es');
        console.log('‚ÑπÔ∏è Remplacez 999 par un ID d\'autorisation valide pour tester compl√®tement');
        
    } catch (error) {
        console.error('‚ùå Erreur lors du test:', error.message);
        
        if (error.response) {
            console.error('üìä Status:', error.response.status);
            console.error('üìã Erreur:', error.response.data);
        }
    }
}

// Test de l'accessibilit√© de la route
async function testRouteAccessibility() {
    console.log('\nüîç Test de l\'accessibilit√© de la route (sans token)');
    
    try {
        const response = await axios.patch(`${BASE_URL}/api/access/authorization/999`, {
            statut: 'expire',
            raison_demande: 'Test d\'accessibilit√©'
        });
        console.log('‚ùå Route accessible sans authentification (401 attendu)');
        console.log('üìä Status re√ßu:', response.status);
    } catch (error) {
        if (error.response?.status === 401) {
            console.log('‚úÖ Route correctement prot√©g√©e (401 re√ßu)');
        } else if (error.response?.status === 404) {
            console.log('‚úÖ Route prot√©g√©e mais autorisation non trouv√©e (404 re√ßu)');
        } else {
            console.log('‚ö†Ô∏è Erreur inattendue:', error.response?.status);
        }
    }
}

// Test des middlewares de s√©curit√©
async function testMiddlewaresSecurite() {
    console.log('\nüîí Test des middlewares de s√©curit√©');
    console.log('=' .repeat(40));
    
    console.log('‚úÖ Middleware 1: authMiddleware.protect');
    console.log('   - V√©rifie l\'authentification JWT');
    console.log('   - Rejette les requ√™tes sans token valide');
    
    console.log('‚úÖ Middleware 2: accessMiddleware.getAuthorizationContext');
    console.log('   - R√©cup√®re l\'autorisation et son contexte');
    console.log('   - Inclut les informations patient/m√©decin');
    console.log('   - V√©rifie l\'existence de l\'autorisation');
    
    console.log('‚úÖ Middleware 3: accessMiddleware.checkAuthorizationOwnership');
    console.log('   - V√©rifie les permissions de l\'utilisateur');
    console.log('   - Seuls les propri√©taires peuvent modifier');
    console.log('   - Gestion des r√¥les (admin, m√©decin, patient)');
    
    console.log('‚úÖ Contr√¥leur: accessController.updateAuthorizationAccess');
    console.log('   - Validation des donn√©es');
    console.log('   - Mise √† jour avec tra√ßabilit√©');
    console.log('   - Cr√©ation d\'historique automatique');
}

// Fonction principale
async function main() {
    console.log('üöÄ Test de la route PATCH s√©curis√©e pour la modification d\'autorisation');
    console.log('=' .repeat(80));
    
    // Tests de s√©curit√©
    await testRouteSecuriseeAuthorization();
    
    // Information sur les middlewares
    await testMiddlewaresSecurite();
    
    console.log('\nüîç R√âSUM√â DES TESTS');
    console.log('=' .repeat(40));
    console.log('‚úÖ Tests de s√©curit√© termin√©s');
    
    console.log('\nüí° ANALYSE:');
    console.log('1. Si tous les tests passent:');
    console.log('   - La route est correctement s√©curis√©e ‚úÖ');
    console.log('   - Les middlewares fonctionnent ‚úÖ');
    console.log('   - La validation des donn√©es est active ‚úÖ');
    
    console.log('\n2. Si certains tests √©chouent:');
    console.log('   - V√©rifiez que le serveur a √©t√© red√©marr√©');
    console.log('   - V√©rifiez que les middlewares sont bien import√©s');
    console.log('   - V√©rifiez les logs du serveur');
    
    console.log('\nüö® RECOMMANDATIONS:');
    console.log('1. Red√©marrez le serveur apr√®s les modifications');
    console.log('2. Testez avec des tokens valides de diff√©rents r√¥les');
    console.log('3. V√©rifiez que les autorisations existent dans votre base');
    console.log('4. Surveillez les logs pour la tra√ßabilit√© compl√®te');
}

// Ex√©cution
if (require.main === module) {
    main().catch(console.error);
}

module.exports = {
    testRouteSecuriseeAuthorization,
    testRouteAccessibility,
    testMiddlewaresSecurite
};

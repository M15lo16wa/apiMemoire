const axios = require('axios');

// Configuration
const BASE_URL = 'http://localhost:3000';
const ENDPOINT = '/api/prescription/ordonnances-recentes';

// Token de test valide pour le professionnel ID 2 (Diop Mamadou)
const TEST_TOKEN = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Miwicm9sZSI6InByb2Zlc3Npb25uZWwiLCJpZF9wcm9mZXNzaW9ubmVsIjoyLCJudW1lcm9fYWRlbGkiOiJBSDIzNDU2NzgwIiwiaWF0IjoxNzU1MDA3MDIyLCJleHAiOjE3NTUwOTM0MjJ9.b2Bcs6vDpEiu1mf4DSMQt04Gd_e6Rz4lfzdZEGFtmL0';

async function testOrdonnancesRecentesV2() {
  console.log('üß™ Test de la route /ordonnances-recentes (Nouvelle version)');
  console.log('========================================================\n');

  try {
    // Test 1: Sans param√®tres (doit retourner les 10 plus r√©centes par d√©faut)
    console.log('1Ô∏è‚É£ Test sans param√®tres (d√©faut):');
    try {
      const response = await axios.get(`${BASE_URL}${ENDPOINT}`, {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ Succ√®s: 200 OK');
      console.log('   Status:', response.data.status);
      console.log('   Message:', response.data.message);
      console.log('   Total prescriptions:', response.data.data.total);
      console.log('   Limit appliqu√©:', response.data.data.limit);
      console.log('   Type filtr√©:', response.data.data.type);
      console.log('   Prescriptions retourn√©es:', response.data.data.prescriptions.length);
    } catch (error) {
      if (error.response) {
        console.log('‚ùå Erreur:', error.response.status, error.response.data.message || error.response.data);
      } else {
        console.log('‚ùå Erreur r√©seau:', error.message);
      }
    }

    console.log('\n2Ô∏è‚É£ Test avec limite personnalis√©e:');
    try {
      const response = await axios.get(`${BASE_URL}${ENDPOINT}?limit=5`, {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ Succ√®s: 200 OK');
      console.log('   Limit demand√©: 5');
      console.log('   Limit appliqu√©:', response.data.data.limit);
      console.log('   Prescriptions retourn√©es:', response.data.data.prescriptions.length);
    } catch (error) {
      if (error.response) {
        console.log('‚ùå Erreur:', error.response.status, error.response.data.message || error.response.data);
      } else {
        console.log('‚ùå Erreur r√©seau:', error.message);
      }
    }

    console.log('\n3Ô∏è‚É£ Test avec filtre par type (ordonnances uniquement):');
    try {
      const response = await axios.get(`${BASE_URL}${ENDPOINT}?type=ordonnance&limit=10`, {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ Succ√®s: 200 OK');
      console.log('   Type filtr√©: ordonnance');
      console.log('   Total ordonnances:', response.data.data.total);
      console.log('   Prescriptions retourn√©es:', response.data.data.prescriptions.length);
      
      // V√©rifier que toutes sont bien des ordonnances
      const allOrdonnances = response.data.data.prescriptions.every(p => p.type_prescription === 'ordonnance');
      console.log('   Toutes sont des ordonnances:', allOrdonnances ? '‚úÖ' : '‚ùå');
    } catch (error) {
      if (error.response) {
        console.log('‚ùå Erreur:', error.response.status, error.response.data.message || error.response.data);
      } else {
        console.log('‚ùå Erreur r√©seau:', error.message);
      }
    }

    console.log('\n4Ô∏è‚É£ Test avec filtre par patient:');
    try {
      const response = await axios.get(`${BASE_URL}${ENDPOINT}?patient_id=5&limit=10`, {
        headers: {
          'Authorization': `Bearer ${TEST_TOKEN}`,
          'Content-Type': 'application/json'
        }
      });
      console.log('‚úÖ Succ√®s: 200 OK');
      console.log('   Patient ID: 5');
      console.log('   Total prescriptions pour ce patient:', response.data.data.total);
      console.log('   Prescriptions retourn√©es:', response.data.data.prescriptions.length);
      
      // V√©rifier que toutes appartiennent au patient 5
      const allForPatient = response.data.data.prescriptions.every(p => p.patient_id === 5);
      console.log('   Toutes pour le patient 5:', allForPatient ? '‚úÖ' : '‚ùå');
    } catch (error) {
      if (error.response) {
        console.log('‚ùå Erreur:', error.response.status, error.response.data.message || error.response.data);
      } else {
        console.log('‚ùå Erreur r√©seau:', error.message);
      }
    }

    console.log('\n5Ô∏è‚É£ Test sans token (doit retourner 401):');
    try {
      const response = await axios.get(`${BASE_URL}${ENDPOINT}`);
      console.log('‚ùå Erreur: Devrait retourner 401 mais a retourn√©:', response.status);
    } catch (error) {
      if (error.response && error.response.status === 401) {
        console.log('‚úÖ Succ√®s: 401 Unauthorized retourn√© comme attendu');
      } else {
        console.log('‚ùå Erreur inattendue:', error.message);
      }
    }

  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error.message);
  }
}

// Ex√©cuter le test
testOrdonnancesRecentesV2();

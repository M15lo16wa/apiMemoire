/**
 * Test pour v√©rifier le p√©rim√®tre de la 2FA
 * V√©rifie que seules les routes d'acc√®s aux dossiers patients sont prot√©g√©es
 */

const { get2FARequirement, getAll2FAProtectedRoutes } = require('./src/config/2fa-protected-routes');

console.log('üîê Test du P√©rim√®tre de la 2FA\n');

// 1. V√©rifier la configuration des routes prot√©g√©es
console.log('üìã Configuration des routes prot√©g√©es par 2FA :');
const protectedRoutes = getAll2FAProtectedRoutes();
console.log(JSON.stringify(protectedRoutes, null, 2));

// 2. Tester les routes d'acc√®s (doivent √™tre prot√©g√©es)
console.log('\n‚úÖ Test des routes d\'acc√®s (doivent √™tre prot√©g√©es) :');
const accessRoutes = [
  '/access/request-standard',
  '/access/grant-emergency',
  '/access/revoke-access',
  '/access/modify-permissions',
  '/access/status/123',
  '/access/patient/status'
];

accessRoutes.forEach(route => {
  const requirement = get2FARequirement(route);
  const status = requirement.requires2FA ? '‚úÖ PROT√âG√âE' : '‚ùå NON PROT√âG√âE';
  console.log(`${route} -> ${status} (niveau: ${requirement.level})`);
});

// 3. Tester les routes non-critiques (ne doivent PAS √™tre prot√©g√©es)
console.log('\n‚ùå Test des routes non-critiques (ne doivent PAS √™tre prot√©g√©es) :');
const nonCriticalRoutes = [
  '/prescription/ordonnance',
  '/prescription/demande-examen',
  '/dossierMedical/',
  '/dossierMedical/123',
  '/dossierMedical/123/update',
  '/consultation/create',
  '/professionnelSante/create'
];

nonCriticalRoutes.forEach(route => {
  const requirement = get2FARequirement(route);
  const status = requirement.requires2FA ? '‚ùå PROT√âG√âE (ERREUR!)' : '‚úÖ NON PROT√âG√âE';
  console.log(`${route} -> ${status}`);
});

// 4. V√©rifier que seules les routes d'acc√®s sont prot√©g√©es
console.log('\nüîç V√©rification du p√©rim√®tre :');
const allProtectedRoutes = [];
Object.values(protectedRoutes).forEach(module => {
  allProtectedRoutes.push(...module.critical, ...module.sensitive);
});

console.log(`Nombre total de routes prot√©g√©es : ${allProtectedRoutes.length}`);
console.log('Routes prot√©g√©es :', allProtectedRoutes);

// 5. V√©rifier que toutes les routes prot√©g√©es commencent par /access
const nonAccessRoutes = allProtectedRoutes.filter(route => !route.startsWith('/access'));
if (nonAccessRoutes.length === 0) {
  console.log('‚úÖ SUCC√àS : Toutes les routes prot√©g√©es concernent l\'acc√®s aux dossiers patients');
} else {
  console.log('‚ùå ERREUR : Certaines routes prot√©g√©es ne concernent pas l\'acc√®s :', nonAccessRoutes);
}

console.log('\nüéØ R√©sum√© :');
console.log('- La 2FA ne s\'applique qu\'√† l\'acc√®s aux dossiers m√©dicaux des patients');
console.log('- Les prescriptions, consultations et gestion des dossiers ne n√©cessitent PAS la 2FA');
console.log('- Seules les routes /access/* sont prot√©g√©es par la 2FA');
